{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Akshay's Knowledge Base # Openssl # OpenSSL CLI Guide","title":"Akshay's Knowledge Base"},{"location":"#akshays-knowledge-base","text":"","title":"Akshay's Knowledge Base"},{"location":"#openssl","text":"OpenSSL CLI Guide","title":"Openssl"},{"location":"01_pages/01_openssl_cli/","text":"OpenSSL CLI Tutorial # Installation # Below command installs openssl: sudo apt install openssl Output: openssl is already the newest version ( 3 .0.13-0ubuntu3.5 ) You can check the installed version with: openssl version Output: OpenSSL 3 .0.13 30 Jan 2024 ( Library: OpenSSL 3 .0.13 30 Jan 2024 ) Introduction # openssl <command> [ options ] [ arguments ] Before we go into the details, let us first learn a bit of theory on Asymmetric Cryptography, EC and RSA. Asymmetric Key Cryptography # Asymmetric key cryptography is a form of cryptography where there are two keys involved - a public key and a private key. The public key is distributed to other people but the private key is always held a secret. There are two main forms in which asymmetric key cryptography is used: Encryption/Decryption and SignatureGeneration/Verification. The server generates a key pair and distributes the public key to the clients. In case of Encryption/Decryption, the clients can encrypt their transmission using the public key and the server would be the only one who is able to decrypt it as he holds the private key. Even though the above method is logical, as its extremely time consuming, the client usually establishes a session by encrypting a symmetric key with the public key and transmits it to the server, who decrypts it using the private key and uses that symmetric key for all future communications. Hence this article will mainly explore the generation of the key pair and encryption/decryption and signatureGeneration/Verification using RSA and EC (Elliptic Key Cryptography). The various asymmetric key cryptography algorithms supported by OpenSSL utility are RSA, RSA-PSS, EC, X25519, X448, ED25519 and ED448. RSA is the most common form of asymmetric key cryptography. OpenSSL CLI Introduction # We have a list of OpenSSL sub utilities which we can use to demonstrate the different types of asymmetric key cryptographic operations. The main sub utilities and their respective purposes are as follows: GenPKey is a sub utility to generate Private Keys. RSA is a sub utility for processing RSA keys. EC is a sub utility for processing EC keys. DGST is a sub utility for generating a digest and also signing / verifying the digest using a private key. PKeyUtl is a sub utility to sign/verify hash and also encryption/decryption of plain text. OpenSSL has a few defaults which are as follows: OpenSSL assumes the keys in the arguments to be of the PEM(privacy Enhanced Mail) format if not specified. OpenSSL considers the keys in arguments to be private keys by default. PEM vs DER # DER is the preferred ASN.1 syntax for Cryptographic Keys and for identifying Schemes. But as DER is not transmittable over a network, the DER is base64 encoded to form the PEM format. Update DER encoding here #ToDo Update ASN.1 encoding here #ToDo RSA # References: PKCS #1 specification -> RFC 8017 A RSA Private key consists of: version (0 unless multi prime is used in which case its 1) Modulus (same length as key) publicExponent privateExponent (same length as key) prime1 prime2 exponent1 exponent2 coefficient prime n exponent n coefficient n A RSA Public key is nothing but extracting the Modulus and public exponent. Hence a public key consists of: Modulus Public Exponent OpenSSL defaults: The RSA key sizes shall be a minimum of 1024 bits. The default size of RSA key in OpenSSL is 2048 bits. The default number of prime numbers used is 2. The maximum number of prime numbers supported is 3. The default public exponent is 65537. As the public exponent becomes smaller and smaller, the computation time becomes lesser. EC # Elliptic Curve public key is of the following format: first bit is compression ((n-1)/2) bits are x ((n-1)/2) bits are y Structured version of ECC Keys are to be described #ToDo Practical Experiments # Generating a private key (RSA) # The sub-utility used for generating a private key is genpkey . Generating a RSA Private Key in PEM format: openssl genpkey -out private_key.pem -algorithm RSA Generating a RSA 3072 bit Private Key with 3 primes and a public exponent 17 in DER format: openssl genpkey -out private_key.der -outform DER -algorithm RSA -pkeyopt rsa_keygen_bits:3072 -pkeyopt rsa_keygen_primes:3 -pkeyopt rsa_keygen_pubexp:17 To confirm if our parameters have taken effect, we can run the same in -text without an output file. openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:3072 -pkeyopt rsa_keygen_primes:3 -pkeyopt rsa_keygen_pubexp:17 -text Extracting the public Key (RSA) # Prerequisites Generating a private key (RSA) The public key can be extracted from the private key using the rsa sub-utility. We can extract the public key using the RSA utility. There are two major formats for a RSA Public key. The PEM public key format uses the header and footer lines: -----BEGIN PUBLIC KEY----- -----END PUBLIC KEY----- The PEM RSAPublicKey format uses the header and footer lines: -----BEGIN RSA PUBLIC KEY----- -----END RSA PUBLIC KEY----- To extract the key in the first PEM public key format: openssl rsa -in private_key.pem -pubout -out public_key.pem To extract the key in the second PEM RSAPublicKey key format: openssl rsa -in private_key.pem -RSAPublicKey_out -out public_key.pem Generating a signature (RSA) # Prerequisites Generating a private key (RSA) Signature can be created either using the dgst sub util or using the pkeyutl sub utility. Lets create a plain text: echo \"Wonderful Wolrd!\" > plain_text.txt There are two ways we can sign a plain text as described above. Let us first generate the signature using the dgst sub utility. openssl dgst -sha256 -out signature.sig -sign private_key.pem plain_text.txt Let us create another signature using the second method. For this first lets generate the SHA2-256 digest of the plain_text.txt . openssl dgst -sha256 -binary -out hash.sha256 plain_text.txt Now let us sign the generated hash using pkeyutl . openssl pkeyutl -sign -in hash.sha256 -inkey private_key.pem -out signature2.sig -pkeyopt digest:sha256 To show that both methods produce the same signature, we can confirm without diff signature.sig signature2.sig Investigate why OpenSSL does not generate a private key of -----BEGIN RSA PRIVATE KEY----- but rather generates -----BEGIN PRIVATE KEY-----. #ToDo Verifying a signature (RSA) # Prerequisites Generating a signature (RSA) and Extracting the public Key (RSA) The verify signature is similar to Generating a signature (RSA) openssl dgst -sha256 -verify public_key.pem -signature signature.sig plain_text.txt The second method is the roundabout way of calculating hash and then verifying the signature. But this was not successful for me - hence lets update when we get the time. #ToDo Encrypting a file (RSA) # Prerequisites Extracting the public Key (RSA) We could encrypt any plain text using the public key as follows: openssl pkeyutl -encrypt -inkey public_key.pem -pubin -in plain_text.txt -out cipher_text.txt Decrypting a file (RSA) # Prerequisites Generating a private key (RSA) We could decrypt any plain text using the private key as follows: openssl pkeyutl -decrypt -inkey private_key.pem -in cipher_text.txt -out plain_text2.txt Encrypted Private keys (RSA) # An encrypted private key is better and safer than a plain private key. Generation of private Key (Encrypted RSA) # openssl genpkey -out private_key2.pem -algorithm RSA -aes-128-cbc -pass pass:hello Now lets find out what exactly happens in the background. Let us create a non encrypted private key from the encrypted one. openssl rsa -in private_key2.pem -passin pass:hello -out private_key3.pem I still don't know how to encrypt private_key3.pem to make it private_key2.pem #ToDo I could encrypt using ```openssl enc -aes-128-cbc -e -pass pass:hello -in private_key3.pem -out private_key4.pem -a #ToDo Hence lets fallback and try the other operations. Extracting the Public key (Encrypted RSA) # openssl rsa -in private_key2.pem -passin pass:hello --RSAPublicKey_out -out public_key2.pem Generating a Signature (Encrypted RSA) # openssl dgst -sha256 -out signature3.sig -sign private_key2.pem -passin pass:hello plain_text.txt openssl pkeyutl -sign -in hash.sha256 -inkey private_key2.pem -passin pass:hello -out signature4.sig -pkeyopt digest:sha256 diff signature3.sig signature4.sig Verifying the signature (Encrypted RSA) # Find out why OpenSSL dgst function accept a RSA Public key but only accepts a generic public key.#ToDo Hence to avoid this problem lets convert our RSA Public Key to a generic SSL public public_key.pem openssl rsa -RSAPublicKey_in -in public_key2.pem -out public_key3.pem -pubout openssl dgst -sha256 -verify public_key3.pem -signature signature3.sig plain_text.txt More inforation on the above transformation can be found at How to transform between the two key styles . Generating a private key (EC) # Similar to Generating a private key (RSA) openssl genpkey -out private_key.pem -algorithm EC -pkeyopt ec_paramgen_curve:P-256 -pkeyopt ec_param_enc:named_curve","title":"OpenSSL CLI Tutorial"},{"location":"01_pages/01_openssl_cli/#openssl-cli-tutorial","text":"","title":"OpenSSL CLI Tutorial"},{"location":"01_pages/01_openssl_cli/#installation","text":"Below command installs openssl: sudo apt install openssl Output: openssl is already the newest version ( 3 .0.13-0ubuntu3.5 ) You can check the installed version with: openssl version Output: OpenSSL 3 .0.13 30 Jan 2024 ( Library: OpenSSL 3 .0.13 30 Jan 2024 )","title":"Installation"},{"location":"01_pages/01_openssl_cli/#introduction","text":"openssl <command> [ options ] [ arguments ] Before we go into the details, let us first learn a bit of theory on Asymmetric Cryptography, EC and RSA.","title":"Introduction"},{"location":"01_pages/01_openssl_cli/#asymmetric-key-cryptography","text":"Asymmetric key cryptography is a form of cryptography where there are two keys involved - a public key and a private key. The public key is distributed to other people but the private key is always held a secret. There are two main forms in which asymmetric key cryptography is used: Encryption/Decryption and SignatureGeneration/Verification. The server generates a key pair and distributes the public key to the clients. In case of Encryption/Decryption, the clients can encrypt their transmission using the public key and the server would be the only one who is able to decrypt it as he holds the private key. Even though the above method is logical, as its extremely time consuming, the client usually establishes a session by encrypting a symmetric key with the public key and transmits it to the server, who decrypts it using the private key and uses that symmetric key for all future communications. Hence this article will mainly explore the generation of the key pair and encryption/decryption and signatureGeneration/Verification using RSA and EC (Elliptic Key Cryptography). The various asymmetric key cryptography algorithms supported by OpenSSL utility are RSA, RSA-PSS, EC, X25519, X448, ED25519 and ED448. RSA is the most common form of asymmetric key cryptography.","title":"Asymmetric Key Cryptography"},{"location":"01_pages/01_openssl_cli/#openssl-cli-introduction","text":"We have a list of OpenSSL sub utilities which we can use to demonstrate the different types of asymmetric key cryptographic operations. The main sub utilities and their respective purposes are as follows: GenPKey is a sub utility to generate Private Keys. RSA is a sub utility for processing RSA keys. EC is a sub utility for processing EC keys. DGST is a sub utility for generating a digest and also signing / verifying the digest using a private key. PKeyUtl is a sub utility to sign/verify hash and also encryption/decryption of plain text. OpenSSL has a few defaults which are as follows: OpenSSL assumes the keys in the arguments to be of the PEM(privacy Enhanced Mail) format if not specified. OpenSSL considers the keys in arguments to be private keys by default.","title":"OpenSSL CLI Introduction"},{"location":"01_pages/01_openssl_cli/#pem-vs-der","text":"DER is the preferred ASN.1 syntax for Cryptographic Keys and for identifying Schemes. But as DER is not transmittable over a network, the DER is base64 encoded to form the PEM format. Update DER encoding here #ToDo Update ASN.1 encoding here #ToDo","title":"PEM vs DER"},{"location":"01_pages/01_openssl_cli/#rsa","text":"References: PKCS #1 specification -> RFC 8017 A RSA Private key consists of: version (0 unless multi prime is used in which case its 1) Modulus (same length as key) publicExponent privateExponent (same length as key) prime1 prime2 exponent1 exponent2 coefficient prime n exponent n coefficient n A RSA Public key is nothing but extracting the Modulus and public exponent. Hence a public key consists of: Modulus Public Exponent OpenSSL defaults: The RSA key sizes shall be a minimum of 1024 bits. The default size of RSA key in OpenSSL is 2048 bits. The default number of prime numbers used is 2. The maximum number of prime numbers supported is 3. The default public exponent is 65537. As the public exponent becomes smaller and smaller, the computation time becomes lesser.","title":"RSA"},{"location":"01_pages/01_openssl_cli/#ec","text":"Elliptic Curve public key is of the following format: first bit is compression ((n-1)/2) bits are x ((n-1)/2) bits are y Structured version of ECC Keys are to be described #ToDo","title":"EC"},{"location":"01_pages/01_openssl_cli/#practical-experiments","text":"","title":"Practical Experiments"},{"location":"01_pages/01_openssl_cli/#generating-a-private-key-rsa","text":"The sub-utility used for generating a private key is genpkey . Generating a RSA Private Key in PEM format: openssl genpkey -out private_key.pem -algorithm RSA Generating a RSA 3072 bit Private Key with 3 primes and a public exponent 17 in DER format: openssl genpkey -out private_key.der -outform DER -algorithm RSA -pkeyopt rsa_keygen_bits:3072 -pkeyopt rsa_keygen_primes:3 -pkeyopt rsa_keygen_pubexp:17 To confirm if our parameters have taken effect, we can run the same in -text without an output file. openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:3072 -pkeyopt rsa_keygen_primes:3 -pkeyopt rsa_keygen_pubexp:17 -text","title":"Generating a private key (RSA)"},{"location":"01_pages/01_openssl_cli/#extracting-the-public-key-rsa","text":"Prerequisites Generating a private key (RSA) The public key can be extracted from the private key using the rsa sub-utility. We can extract the public key using the RSA utility. There are two major formats for a RSA Public key. The PEM public key format uses the header and footer lines: -----BEGIN PUBLIC KEY----- -----END PUBLIC KEY----- The PEM RSAPublicKey format uses the header and footer lines: -----BEGIN RSA PUBLIC KEY----- -----END RSA PUBLIC KEY----- To extract the key in the first PEM public key format: openssl rsa -in private_key.pem -pubout -out public_key.pem To extract the key in the second PEM RSAPublicKey key format: openssl rsa -in private_key.pem -RSAPublicKey_out -out public_key.pem","title":"Extracting the public Key (RSA)"},{"location":"01_pages/01_openssl_cli/#generating-a-signature-rsa","text":"Prerequisites Generating a private key (RSA) Signature can be created either using the dgst sub util or using the pkeyutl sub utility. Lets create a plain text: echo \"Wonderful Wolrd!\" > plain_text.txt There are two ways we can sign a plain text as described above. Let us first generate the signature using the dgst sub utility. openssl dgst -sha256 -out signature.sig -sign private_key.pem plain_text.txt Let us create another signature using the second method. For this first lets generate the SHA2-256 digest of the plain_text.txt . openssl dgst -sha256 -binary -out hash.sha256 plain_text.txt Now let us sign the generated hash using pkeyutl . openssl pkeyutl -sign -in hash.sha256 -inkey private_key.pem -out signature2.sig -pkeyopt digest:sha256 To show that both methods produce the same signature, we can confirm without diff signature.sig signature2.sig Investigate why OpenSSL does not generate a private key of -----BEGIN RSA PRIVATE KEY----- but rather generates -----BEGIN PRIVATE KEY-----. #ToDo","title":"Generating a signature (RSA)"},{"location":"01_pages/01_openssl_cli/#verifying-a-signature-rsa","text":"Prerequisites Generating a signature (RSA) and Extracting the public Key (RSA) The verify signature is similar to Generating a signature (RSA) openssl dgst -sha256 -verify public_key.pem -signature signature.sig plain_text.txt The second method is the roundabout way of calculating hash and then verifying the signature. But this was not successful for me - hence lets update when we get the time. #ToDo","title":"Verifying a signature (RSA)"},{"location":"01_pages/01_openssl_cli/#encrypting-a-file-rsa","text":"Prerequisites Extracting the public Key (RSA) We could encrypt any plain text using the public key as follows: openssl pkeyutl -encrypt -inkey public_key.pem -pubin -in plain_text.txt -out cipher_text.txt","title":"Encrypting a file (RSA)"},{"location":"01_pages/01_openssl_cli/#decrypting-a-file-rsa","text":"Prerequisites Generating a private key (RSA) We could decrypt any plain text using the private key as follows: openssl pkeyutl -decrypt -inkey private_key.pem -in cipher_text.txt -out plain_text2.txt","title":"Decrypting a file (RSA)"},{"location":"01_pages/01_openssl_cli/#encrypted-private-keys-rsa","text":"An encrypted private key is better and safer than a plain private key.","title":"Encrypted Private keys (RSA)"},{"location":"01_pages/01_openssl_cli/#generation-of-private-key-encrypted-rsa","text":"openssl genpkey -out private_key2.pem -algorithm RSA -aes-128-cbc -pass pass:hello Now lets find out what exactly happens in the background. Let us create a non encrypted private key from the encrypted one. openssl rsa -in private_key2.pem -passin pass:hello -out private_key3.pem I still don't know how to encrypt private_key3.pem to make it private_key2.pem #ToDo I could encrypt using ```openssl enc -aes-128-cbc -e -pass pass:hello -in private_key3.pem -out private_key4.pem -a #ToDo Hence lets fallback and try the other operations.","title":"Generation of private Key (Encrypted RSA)"},{"location":"01_pages/01_openssl_cli/#extracting-the-public-key-encrypted-rsa","text":"openssl rsa -in private_key2.pem -passin pass:hello --RSAPublicKey_out -out public_key2.pem","title":"Extracting the Public key (Encrypted RSA)"},{"location":"01_pages/01_openssl_cli/#generating-a-signature-encrypted-rsa","text":"openssl dgst -sha256 -out signature3.sig -sign private_key2.pem -passin pass:hello plain_text.txt openssl pkeyutl -sign -in hash.sha256 -inkey private_key2.pem -passin pass:hello -out signature4.sig -pkeyopt digest:sha256 diff signature3.sig signature4.sig","title":"Generating a Signature (Encrypted RSA)"},{"location":"01_pages/01_openssl_cli/#verifying-the-signature-encrypted-rsa","text":"Find out why OpenSSL dgst function accept a RSA Public key but only accepts a generic public key.#ToDo Hence to avoid this problem lets convert our RSA Public Key to a generic SSL public public_key.pem openssl rsa -RSAPublicKey_in -in public_key2.pem -out public_key3.pem -pubout openssl dgst -sha256 -verify public_key3.pem -signature signature3.sig plain_text.txt More inforation on the above transformation can be found at How to transform between the two key styles .","title":"Verifying the signature (Encrypted RSA)"},{"location":"01_pages/01_openssl_cli/#generating-a-private-key-ec","text":"Similar to Generating a private key (RSA) openssl genpkey -out private_key.pem -algorithm EC -pkeyopt ec_paramgen_curve:P-256 -pkeyopt ec_param_enc:named_curve","title":"Generating a private key (EC)"},{"location":"01_pages/openssl_cli/openssl-certificates/","text":"OpenSSL Certificates # Self-signed Certificate # openssl req -x509 -key rsa_key.pem -in mycsr.csr -out mycert.pem -days 365 Or directly: openssl req -x509 -newkey rsa:2048 -keyout rsa_key.pem -out mycert.pem -days 365 View Certificate Details # openssl x509 -in mycert.pem -text -noout Verify Key and Certificate # openssl x509 -noout -modulus -in mycert.pem | openssl md5 openssl rsa -noout -modulus -in rsa_key.pem | openssl md5 See Also # \ud83d\udc49 CSR \ud83d\udc49 Overview","title":"OpenSSL Certificates"},{"location":"01_pages/openssl_cli/openssl-certificates/#openssl-certificates","text":"","title":"OpenSSL Certificates"},{"location":"01_pages/openssl_cli/openssl-certificates/#self-signed-certificate","text":"openssl req -x509 -key rsa_key.pem -in mycsr.csr -out mycert.pem -days 365 Or directly: openssl req -x509 -newkey rsa:2048 -keyout rsa_key.pem -out mycert.pem -days 365","title":"Self-signed Certificate"},{"location":"01_pages/openssl_cli/openssl-certificates/#view-certificate-details","text":"openssl x509 -in mycert.pem -text -noout","title":"View Certificate Details"},{"location":"01_pages/openssl_cli/openssl-certificates/#verify-key-and-certificate","text":"openssl x509 -noout -modulus -in mycert.pem | openssl md5 openssl rsa -noout -modulus -in rsa_key.pem | openssl md5","title":"Verify Key and Certificate"},{"location":"01_pages/openssl_cli/openssl-certificates/#see-also","text":"\ud83d\udc49 CSR \ud83d\udc49 Overview","title":"See Also"},{"location":"01_pages/openssl_cli/openssl-cheatsheet/","text":"OpenSSL Cheatsheet # \u2705 Check version: openssl version -a \u2705 Generate RSA key: openssl genpkey -algorithm RSA -out key.pem -pkeyopt rsa_keygen_bits:2048 \u2705 Create CSR: openssl req -new -key key.pem -out csr.csr \u2705 Self-sign cert: openssl req -x509 -key key.pem -out cert.pem -days 365 \u2705 Encrypt/Decrypt: openssl enc -aes-256-cbc -salt -in plain.txt -out secret.enc openssl enc -d -aes-256-cbc -in secret.enc -out plain.txt \u2705 Check cert: openssl x509 -in cert.pem -text -noout \u2705 Test server: openssl s_client -connect example.com:443 See Also # \ud83d\udc49 Overview","title":"OpenSSL Cheatsheet"},{"location":"01_pages/openssl_cli/openssl-cheatsheet/#openssl-cheatsheet","text":"\u2705 Check version: openssl version -a \u2705 Generate RSA key: openssl genpkey -algorithm RSA -out key.pem -pkeyopt rsa_keygen_bits:2048 \u2705 Create CSR: openssl req -new -key key.pem -out csr.csr \u2705 Self-sign cert: openssl req -x509 -key key.pem -out cert.pem -days 365 \u2705 Encrypt/Decrypt: openssl enc -aes-256-cbc -salt -in plain.txt -out secret.enc openssl enc -d -aes-256-cbc -in secret.enc -out plain.txt \u2705 Check cert: openssl x509 -in cert.pem -text -noout \u2705 Test server: openssl s_client -connect example.com:443","title":"OpenSSL Cheatsheet"},{"location":"01_pages/openssl_cli/openssl-cheatsheet/#see-also","text":"\ud83d\udc49 Overview","title":"See Also"},{"location":"01_pages/openssl_cli/openssl-csr/","text":"OpenSSL Certificate Signing Request (CSR) # Use CSR to request a signed certificate. Create CSR # openssl req -new -key rsa_key.pem -out mycsr.csr Skip prompts: openssl req -new -key rsa_key.pem -out mycsr.csr \\ -subj \"/C=IN/ST=TN/L=Chennai/O=Example Ltd/OU=IT/CN=example.com\" See Also # \ud83d\udc49 Private Keys \ud83d\udc49 Certificates \ud83d\udc49 Overview","title":"OpenSSL Certificate Signing Request (CSR)"},{"location":"01_pages/openssl_cli/openssl-csr/#openssl-certificate-signing-request-csr","text":"Use CSR to request a signed certificate.","title":"OpenSSL Certificate Signing Request (CSR)"},{"location":"01_pages/openssl_cli/openssl-csr/#create-csr","text":"openssl req -new -key rsa_key.pem -out mycsr.csr Skip prompts: openssl req -new -key rsa_key.pem -out mycsr.csr \\ -subj \"/C=IN/ST=TN/L=Chennai/O=Example Ltd/OU=IT/CN=example.com\"","title":"Create CSR"},{"location":"01_pages/openssl_cli/openssl-csr/#see-also","text":"\ud83d\udc49 Private Keys \ud83d\udc49 Certificates \ud83d\udc49 Overview","title":"See Also"},{"location":"01_pages/openssl_cli/openssl-digest/","text":"OpenSSL Digest (Checksum) # Create SHA-256 Digest # openssl dgst -sha256 file.txt Other Digests # openssl dgst -md5 file.txt openssl dgst -sha512 file.txt See Also # \ud83d\udc49 Overview","title":"OpenSSL Digest (Checksum)"},{"location":"01_pages/openssl_cli/openssl-digest/#openssl-digest-checksum","text":"","title":"OpenSSL Digest (Checksum)"},{"location":"01_pages/openssl_cli/openssl-digest/#create-sha-256-digest","text":"openssl dgst -sha256 file.txt","title":"Create SHA-256 Digest"},{"location":"01_pages/openssl_cli/openssl-digest/#other-digests","text":"openssl dgst -md5 file.txt openssl dgst -sha512 file.txt","title":"Other Digests"},{"location":"01_pages/openssl_cli/openssl-digest/#see-also","text":"\ud83d\udc49 Overview","title":"See Also"},{"location":"01_pages/openssl_cli/openssl-encrypt-decrypt/","text":"OpenSSL Encrypt & Decrypt # Encrypt File # openssl enc -aes-256-cbc -salt -in plain.txt -out secret.enc Decrypt File # openssl enc -d -aes-256-cbc -in secret.enc -out plain.txt See Also # \ud83d\udc49 Overview","title":"OpenSSL Encrypt &amp; Decrypt"},{"location":"01_pages/openssl_cli/openssl-encrypt-decrypt/#openssl-encrypt--decrypt","text":"","title":"OpenSSL Encrypt &amp; Decrypt"},{"location":"01_pages/openssl_cli/openssl-encrypt-decrypt/#encrypt-file","text":"openssl enc -aes-256-cbc -salt -in plain.txt -out secret.enc","title":"Encrypt File"},{"location":"01_pages/openssl_cli/openssl-encrypt-decrypt/#decrypt-file","text":"openssl enc -d -aes-256-cbc -in secret.enc -out plain.txt","title":"Decrypt File"},{"location":"01_pages/openssl_cli/openssl-encrypt-decrypt/#see-also","text":"\ud83d\udc49 Overview","title":"See Also"},{"location":"01_pages/openssl_cli/openssl-format-conversion/","text":"OpenSSL Format Conversion # PEM \u2194 DER # # PEM to DER openssl x509 -outform der -in mycert.pem -out mycert.der # DER to PEM openssl x509 -inform der -in mycert.der -out mycert.pem PEM + Key \u2192 PFX # openssl pkcs12 -export -inkey rsa_key.pem -in mycert.pem -out mycert.pfx See Also # \ud83d\udc49 Certificates \ud83d\udc49 Overview","title":"OpenSSL Format Conversion"},{"location":"01_pages/openssl_cli/openssl-format-conversion/#openssl-format-conversion","text":"","title":"OpenSSL Format Conversion"},{"location":"01_pages/openssl_cli/openssl-format-conversion/#pem--der","text":"# PEM to DER openssl x509 -outform der -in mycert.pem -out mycert.der # DER to PEM openssl x509 -inform der -in mycert.der -out mycert.pem","title":"PEM \u2194 DER"},{"location":"01_pages/openssl_cli/openssl-format-conversion/#pem--key--pfx","text":"openssl pkcs12 -export -inkey rsa_key.pem -in mycert.pem -out mycert.pfx","title":"PEM + Key \u2192 PFX"},{"location":"01_pages/openssl_cli/openssl-format-conversion/#see-also","text":"\ud83d\udc49 Certificates \ud83d\udc49 Overview","title":"See Also"},{"location":"01_pages/openssl_cli/openssl-genparam/","text":"OpenSSL genparam # genparam generates parameters needed by some algorithms (DH, DSA). Example: Generate DH Params # openssl genparam -algorithm DH -out dhparam.pem -pkeyopt dh_paramgen_prime_len:2048 Then generate a DH private key: openssl genpkey -paramfile dhparam.pem -out dhkey.pem See Also # \ud83d\udc49 Generate Private Keys \ud83d\udc49 Overview","title":"OpenSSL genparam"},{"location":"01_pages/openssl_cli/openssl-genparam/#openssl-genparam","text":"genparam generates parameters needed by some algorithms (DH, DSA).","title":"OpenSSL genparam"},{"location":"01_pages/openssl_cli/openssl-genparam/#example-generate-dh-params","text":"openssl genparam -algorithm DH -out dhparam.pem -pkeyopt dh_paramgen_prime_len:2048 Then generate a DH private key: openssl genpkey -paramfile dhparam.pem -out dhkey.pem","title":"Example: Generate DH Params"},{"location":"01_pages/openssl_cli/openssl-genparam/#see-also","text":"\ud83d\udc49 Generate Private Keys \ud83d\udc49 Overview","title":"See Also"},{"location":"01_pages/openssl_cli/openssl-genpkey/","text":"OpenSSL genpkey # genpkey is the recommended modern command to generate private keys. Examples # Generate RSA key: openssl genpkey -algorithm RSA -out rsa_key.pem -pkeyopt rsa_keygen_bits:2048 Generate EC key: openssl genpkey -algorithm EC -out ec_key.pem -pkeyopt ec_paramgen_curve:P-256 Generate DH key (requires params): openssl genpkey -paramfile dhparam.pem -out dhkey.pem See Also # \ud83d\udc49 Generate Parameters \ud83d\udc49 Overview","title":"OpenSSL genpkey"},{"location":"01_pages/openssl_cli/openssl-genpkey/#openssl-genpkey","text":"genpkey is the recommended modern command to generate private keys.","title":"OpenSSL genpkey"},{"location":"01_pages/openssl_cli/openssl-genpkey/#examples","text":"Generate RSA key: openssl genpkey -algorithm RSA -out rsa_key.pem -pkeyopt rsa_keygen_bits:2048 Generate EC key: openssl genpkey -algorithm EC -out ec_key.pem -pkeyopt ec_paramgen_curve:P-256 Generate DH key (requires params): openssl genpkey -paramfile dhparam.pem -out dhkey.pem","title":"Examples"},{"location":"01_pages/openssl_cli/openssl-genpkey/#see-also","text":"\ud83d\udc49 Generate Parameters \ud83d\udc49 Overview","title":"See Also"},{"location":"01_pages/openssl_cli/openssl-overview/","text":"OpenSSL Overview # OpenSSL is a powerful toolkit for TLS/SSL and cryptography. \ud83d\udccc Common Syntax # openssl <command> [ options ] [ arguments ] Example: openssl version \ud83d\udcda Next Steps # \ud83d\udc49 Generate Private Keys \ud83d\udc49 Generate Parameters \ud83d\udc49 Create CSR \ud83d\udc49 Handle Certificates \ud83d\udc49 Encrypt/Decrypt \ud83d\udc49 Check Digests \ud83d\udc49 Format Conversion \ud83d\udc49 Test SSL Server \ud83d\udc49 Cheatsheet","title":"OpenSSL Overview"},{"location":"01_pages/openssl_cli/openssl-overview/#openssl-overview","text":"OpenSSL is a powerful toolkit for TLS/SSL and cryptography.","title":"OpenSSL Overview"},{"location":"01_pages/openssl_cli/openssl-overview/#-common-syntax","text":"openssl <command> [ options ] [ arguments ] Example: openssl version","title":"\ud83d\udccc Common Syntax"},{"location":"01_pages/openssl_cli/openssl-overview/#-next-steps","text":"\ud83d\udc49 Generate Private Keys \ud83d\udc49 Generate Parameters \ud83d\udc49 Create CSR \ud83d\udc49 Handle Certificates \ud83d\udc49 Encrypt/Decrypt \ud83d\udc49 Check Digests \ud83d\udc49 Format Conversion \ud83d\udc49 Test SSL Server \ud83d\udc49 Cheatsheet","title":"\ud83d\udcda Next Steps"},{"location":"01_pages/openssl_cli/openssl-s_client/","text":"OpenSSL s_client # s_client connects to a TLS/SSL server for testing. Example: Check SSL # openssl s_client -connect example.com:443 See Also # \ud83d\udc49 Overview","title":"OpenSSL s_client"},{"location":"01_pages/openssl_cli/openssl-s_client/#openssl-s_client","text":"s_client connects to a TLS/SSL server for testing.","title":"OpenSSL s_client"},{"location":"01_pages/openssl_cli/openssl-s_client/#example-check-ssl","text":"openssl s_client -connect example.com:443","title":"Example: Check SSL"},{"location":"01_pages/openssl_cli/openssl-s_client/#see-also","text":"\ud83d\udc49 Overview","title":"See Also"},{"location":"01_pages/openssl_cli/openssl_overview/","text":"OpenSSL Overview # OpenSSL is a powerful toolkit for TLS/SSL and cryptography. \ud83d\udccc Common Syntax # openssl <command> [ options ] [ arguments ] Example: openssl version \ud83d\udcda Next Steps # \ud83d\udc49 Generate Private Keys \ud83d\udc49 Generate Parameters \ud83d\udc49 Create CSR \ud83d\udc49 Handle Certificates \ud83d\udc49 Encrypt/Decrypt \ud83d\udc49 Check Digests \ud83d\udc49 Format Conversion \ud83d\udc49 Test SSL Server \ud83d\udc49 Cheatsheet","title":"OpenSSL Overview"},{"location":"01_pages/openssl_cli/openssl_overview/#openssl-overview","text":"OpenSSL is a powerful toolkit for TLS/SSL and cryptography.","title":"OpenSSL Overview"},{"location":"01_pages/openssl_cli/openssl_overview/#-common-syntax","text":"openssl <command> [ options ] [ arguments ] Example: openssl version","title":"\ud83d\udccc Common Syntax"},{"location":"01_pages/openssl_cli/openssl_overview/#-next-steps","text":"\ud83d\udc49 Generate Private Keys \ud83d\udc49 Generate Parameters \ud83d\udc49 Create CSR \ud83d\udc49 Handle Certificates \ud83d\udc49 Encrypt/Decrypt \ud83d\udc49 Check Digests \ud83d\udc49 Format Conversion \ud83d\udc49 Test SSL Server \ud83d\udc49 Cheatsheet","title":"\ud83d\udcda Next Steps"}]}